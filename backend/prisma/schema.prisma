// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int        @id @default(autoincrement())
  fullname         String
  email            String     @unique
  password         String
  email_verified   Boolean    @default(false)
  account_type     String     @default("user")
  account_token    String?
  reset_token      String?
  profile_picture  String?
  bio              String?
  account_balance  Float      @default(0)
  profile_visibility String   @default("private") // "public" or "private"
  created_at       DateTime   @default(now())
  updated_at       DateTime   @updatedAt

  events           Event[]    @relation("UserEvents")
  attendances      Attendee[] @relation("UserAttendees")
  categories       Category[] @relation("UserCategories")
  orders           Order[]    @relation("UserOrders")
  sessions         Session[]  @relation("UserSessions")
  favourites       Favourite[] @relation("UserFavourites")
  sentMessages     Message[]  @relation("SentMessages")
  conversations    ConversationParticipant[] @relation("UserConversations")
}

model Event {
  id                Int        @id @default(autoincrement())
  user_id           Int
  title             String
  description       String
  schedule_type     String     @default("one-time")
  schedule_details  String?
  capacity          String?
  category          String?

  user              User         @relation("UserEvents", fields: [user_id], references: [id])
  tickets           Ticket[]     @relation("EventTickets")
  attendees         Attendee[]   @relation("EventAttendees")
  categories        Category[]   @relation("EventCategories")
  orders            Order[]      @relation("EventOrders")
  images            EventImage[] @relation("EventImages")
  schedules         EventSchedule[] @relation("EventSchedule")
  agendas           EventAgenda[] @relation("EventAgenda")
  favourites        Favourite[] @relation("EventFavourites")
  conversations    Conversation[] @relation("EventConversations")
}

model EventImage {
  id          Int      @id @default(autoincrement())
  event_id    Int
  image_url   String
  description String?

  event       Event    @relation("EventImages", fields: [event_id], references: [id])
}

model EventSchedule {
  id                Int      @id @default(autoincrement())
  event_id          Int
  day               String
  start_time        String
  end_time          String
  comment           String
  location_type     String?
  location_details  String?

  event             Event    @relation("EventSchedule", fields: [event_id], references: [id])
}

model EventAgenda {
  id           Int      @id @default(autoincrement())
  event_id     Int
  name         String
  description  String?
  speakers     String?
  time         String?

  event        Event    @relation("EventAgenda", fields: [event_id], references: [id])
}

model Ticket {
  id             Int         @id @default(autoincrement())
  event_id       Int
  ticket_type    String
  ticket_name    String
  is_free        Boolean     @default(false)
  description    String?
  price          Float?
  quantity       Int?

  event          Event       @relation("EventTickets", fields: [event_id], references: [id])
  attendees      Attendee[]  @relation("TicketAttendees")
  orderItems     OrderItem[] @relation("TicketOrderItems")
}

model Attendee {
  id          Int       @id @default(autoincrement())
  user_id     Int
  event_id    Int
  ticket_id   Int?
  comment     String?

  user        User      @relation("UserAttendees", fields: [user_id], references: [id])
  event       Event     @relation("EventAttendees", fields: [event_id], references: [id])
  ticket      Ticket?   @relation("TicketAttendees", fields: [ticket_id], references: [id])
}

model Category {
  id        Int     @id @default(autoincrement())
  user_id   Int
  event_id  Int
  comment   String?

  user      User    @relation("UserCategories", fields: [user_id], references: [id])
  event     Event   @relation("EventCategories", fields: [event_id], references: [id])
}

model Order {
  id           Int         @id @default(autoincrement())
  user_id      Int
  event_id     Int
  order_number String      @unique
  total_price  Float
  status       String

  user         User        @relation("UserOrders", fields: [user_id], references: [id])
  event        Event       @relation("EventOrders", fields: [event_id], references: [id])
  orderItems   OrderItem[] @relation("OrderItems")
}

model OrderItem {
  id          Int     @id @default(autoincrement())
  order_id    Int
  ticket_id   Int
  quantity    Int
  unit_price  Float
  total_price Float

  order       Order   @relation("OrderItems", fields: [order_id], references: [id])
  ticket      Ticket  @relation("TicketOrderItems", fields: [ticket_id], references: [id])
}

model Favourite {
  id        Int    @id @default(autoincrement())
  user_id   Int
  event_id  Int
  comment   String?

  user      User   @relation("UserFavourites", fields: [user_id], references: [id])
  event     Event  @relation("EventFavourites", fields: [event_id], references: [id])
}

model Session {
  id         Int      @id @default(autoincrement())
  user_id    Int
  token      String   @unique
  is_active  Boolean  @default(true)
  user_agent String?
  expires_at DateTime

  user       User     @relation("UserSessions", fields: [user_id], references: [id])
}

model Conversation {
  id              Int         @id @default(autoincrement())
  event_id        Int
  created_at      DateTime    @default(now())
  updated_at      DateTime    @updatedAt
  
  event           Event       @relation("EventConversations", fields: [event_id], references: [id])
  participants    ConversationParticipant[] @relation("ConversationParticipants")
  messages        Message[]   @relation("ConversationMessages")
}

model Message {
  id              Int         @id @default(autoincrement())
  conversation_id Int         // Changed from chat_room_id
  sender_id       Int
  content         String
  is_deleted      Boolean     @default(false)
  created_at      DateTime    @default(now())
  updated_at      DateTime    @updatedAt
  
  conversation    Conversation @relation("ConversationMessages", fields: [conversation_id], references: [id])
  sender          User        @relation("SentMessages", fields: [sender_id], references: [id])
}

model ConversationParticipant {
  id               Int         @id @default(autoincrement())
  conversation_id  Int
  user_id          Int
  is_active        Boolean     @default(true)
  joined_at        DateTime    @default(now())
  last_read_at     DateTime?
  
  conversation     Conversation @relation("ConversationParticipants", fields: [conversation_id], references: [id])
  user             User        @relation("UserConversations", fields: [user_id], references: [id])
  
  @@unique([conversation_id, user_id])
}